

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_1024 = Integer(1024); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_65537 = Integer(65537)
from Crypto.Util.number import *
import math

def read_values_from_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    
    # Variabel untuk menyimpan nilai n, e, c
    n = None
    e = None
    c = None
    
    for line in lines:
        # Hapus whitespace ekstra
        line = line.strip()
        if line.startswith('n ='):
            n = int(line.split('=')[_sage_const_1 ].strip())
        elif line.startswith('e ='):
            e = int(line.split('=')[_sage_const_1 ].strip())
        elif line.startswith('c ='):
            c = int(line.split('=')[_sage_const_1 ].strip())
    
    # Pastikan nilai n, e, c diambil dengan benar
    if n is None or e is None or c is None:
        raise ValueError("Tidak semua nilai (n, e, c) ditemukan dalam file.")
    
    return n, e, c

n,e,c = read_values_from_file('hasil.txt')
X = _sage_const_3 **_sage_const_1024 
M = matrix(ZZ,[[_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 *X**_sage_const_4 ],[_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_4 *X**_sage_const_3 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_4 *X**_sage_const_2 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_4 *X**_sage_const_1 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,-_sage_const_4 *n]])
for eq in M.LLL():
	x = PolynomialRing(ZZ, 'x').gen()
	pol = eq[_sage_const_0 ]*x**_sage_const_4 +eq[_sage_const_1 ]*x**_sage_const_3 +eq[_sage_const_2 ]*x**_sage_const_2 +eq[_sage_const_3 ]*x+(eq[_sage_const_4 ]//-_sage_const_4 )
	if '(' in str(pol.factor()) and '^4' not in str(pol.factor()):
		lop=pol.factor()
u2,u1,u0 = list(lop[_sage_const_0 ][_sage_const_0 ])[_sage_const_2 ],list(lop[_sage_const_0 ][_sage_const_0 ])[_sage_const_1 ],list(lop[_sage_const_0 ][_sage_const_0 ])[_sage_const_0 ]
v2,v1,v0 = list(lop[_sage_const_1 ][_sage_const_0 ])[_sage_const_2 ],list(lop[_sage_const_1 ][_sage_const_0 ])[_sage_const_1 ],list(lop[_sage_const_1 ][_sage_const_0 ])[_sage_const_0 ]


ap = (X**_sage_const_2 )*u2+(X**_sage_const_1 )*u1+u0
bq = (X**_sage_const_2 )*v2+(X**_sage_const_1 )*v1+v0
p=math.gcd(ap,n)
q=math.gcd(bq,n)
tot = (p-_sage_const_1 )*(q-_sage_const_1 )
e = _sage_const_65537 
d = pow(e,-_sage_const_1 ,tot)
print(long_to_bytes(pow(int(c),int(d),int(p*q))))

